{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"glom_dict \u00a4 Custom Dictionary with glom path compatible get, set and delete methods. https://glom.readthedocs.io/en/latest/ For easy access to and operations on nested data. Installation \u00a4 python -m pip install glom-dict Examples \u00a4 >>> from glom_dict import GlomDict >>> d = GlomDict ( my_dict = { \"a\" : { \"b\" : \"c\" }}) >>> d [ \"my_dict.a.b\" ] 'c' >>> d [ \"my_dict.a.b] = \" C \" >>> d [ \"my_dict.a.b] 'C' Better error messages. \u00a4 >>> d = GlomDict ( ** { 'a' : { 'b' : None }}) >>> d [ \"a.b.c\" ] Traceback ( most recent call last ): ... PathAccessError : could not access 'c' , index 2 in path Path ( 'a' , 'b' , 'c' ), got error : ... Glom Paths \u00a4 from glom_dict import GlomDict , Path >>> d = GlomDict ({ \"a\" : { \"b\" : [ \"works\" , \"with\" , \"lists\" , \"too\" ]}}) >>> d [ Path ( \"a\" , \"b\" , 0 )] 'works' For more examples refer to the excellent glom tutorial. https://glom.readthedocs.io/en/latest/tutorial.html Details \u00a4 Based on collections.UserDict Implemented methods __getitem__ - glom.glom() __setitem__ - glom.assign() __delitem__ - glom.delete() update - Works but no special behavior","title":"Overview"},{"location":"#glom_dict","text":"Custom Dictionary with glom path compatible get, set and delete methods. https://glom.readthedocs.io/en/latest/ For easy access to and operations on nested data.","title":"glom_dict"},{"location":"#installation","text":"python -m pip install glom-dict","title":"Installation"},{"location":"#examples","text":">>> from glom_dict import GlomDict >>> d = GlomDict ( my_dict = { \"a\" : { \"b\" : \"c\" }}) >>> d [ \"my_dict.a.b\" ] 'c' >>> d [ \"my_dict.a.b] = \" C \" >>> d [ \"my_dict.a.b] 'C'","title":"Examples"},{"location":"#better-error-messages","text":">>> d = GlomDict ( ** { 'a' : { 'b' : None }}) >>> d [ \"a.b.c\" ] Traceback ( most recent call last ): ... PathAccessError : could not access 'c' , index 2 in path Path ( 'a' , 'b' , 'c' ), got error : ...","title":"Better error messages."},{"location":"#glom-paths","text":"from glom_dict import GlomDict , Path >>> d = GlomDict ({ \"a\" : { \"b\" : [ \"works\" , \"with\" , \"lists\" , \"too\" ]}}) >>> d [ Path ( \"a\" , \"b\" , 0 )] 'works' For more examples refer to the excellent glom tutorial. https://glom.readthedocs.io/en/latest/tutorial.html","title":"Glom Paths"},{"location":"#details","text":"Based on collections.UserDict Implemented methods __getitem__ - glom.glom() __setitem__ - glom.assign() __delitem__ - glom.delete() update - Works but no special behavior","title":"Details"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd glom-dict make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run glom-dict [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd glom-dict make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run glom-dict [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build glom-dict . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 black | duty | git-changelog | glom | httpx | isort | jinja2-cli | mkdocs | mkdocs-coverage | mkdocs-macros-plugin | mkdocs-material | mkdocstrings | mypy | prospector | pytest | pytest-cov | pytest-icdiff | pytest-sugar | toml Indirect dependencies \u00a4 ansimarkup | appdirs | astroid | astunparse | atomicwrites | attrs | boltons | cached-property | certifi | click | colorama | coverage | dodgy | face | failprint | flake8 | flake8-polyfill | ghp-import | h11 | httpcore | icdiff | idna | importlib-metadata | iniconfig | Jinja2 | lazy-object-proxy | Markdown | MarkupSafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pep8 | pep8-naming | platformdirs | pluggy | pprintpp | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pylint-celery | pylint-django | pylint-flask | pylint-plugin-utils | pymdown-extensions | pyparsing | python-dateutil | pytkdocs | PyYAML | pyyaml-env-tag | regex | requirements-detector | rfc3986 | setoptconf | six | sniffio | snowballstemmer | termcolor | typed-ast | typing-extensions | watchdog | wrapt | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build glom-dict . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"black | duty | git-changelog | glom | httpx | isort | jinja2-cli | mkdocs | mkdocs-coverage | mkdocs-macros-plugin | mkdocs-material | mkdocstrings | mypy | prospector | pytest | pytest-cov | pytest-icdiff | pytest-sugar | toml","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | appdirs | astroid | astunparse | atomicwrites | attrs | boltons | cached-property | certifi | click | colorama | coverage | dodgy | face | failprint | flake8 | flake8-polyfill | ghp-import | h11 | httpcore | icdiff | idna | importlib-metadata | iniconfig | Jinja2 | lazy-object-proxy | Markdown | MarkupSafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pep8 | pep8-naming | platformdirs | pluggy | pprintpp | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pylint-celery | pylint-django | pylint-flask | pylint-plugin-utils | pymdown-extensions | pyparsing | python-dateutil | pytkdocs | PyYAML | pyyaml-env-tag | regex | requirements-detector | rfc3986 | setoptconf | six | sniffio | snowballstemmer | termcolor | typed-ast | typing-extensions | watchdog | wrapt | zipp More credits from the author","title":"Indirect dependencies"},{"location":"license/","text":"MIT License Copyright (c) 2020 None Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}